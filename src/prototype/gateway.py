# bot = telebot.TeleBot("5533579119:AAHtcL9aKrZESemtIp0w8K-6NXb2s6j-mLg")

import telebot
from telebot import types

# import kernel
import dal

login = ""
camp = ""
pas = ""
chat_id = ""
chose = ""
start_time = ""
end_time = ""
bidi = 2
messa = telebot.types.Message

bot = telebot.TeleBot("5533579119:AAHtcL9aKrZESemtIp0w8K-6NXb2s6j-mLg")

START_MESSAGE = '–≠—Ç–æ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –®–∫–æ–ª—ã 21.\n–û–Ω –Ω–∞–ø–∏—Å–∞–Ω —Å–∏–ª–∞–º–∏:\n' \
                '->hashtagr@student.21-school.ru\n->karleneg@student.21-school.ru\n' \
                '–í —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–∞–≥–æ–≤ –∏–ª–∏ –ø–æ–º–æ—â—å—é –≤\n' \
                '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º.\n' \
                '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ /help\n'


@bot.message_handler(commands=['start'])
def SendHello(message):
    bot.reply_to(message, START_MESSAGE)
    print(message)
    global chat_id, messa
    messa = message
    chat_id = message.chat.id
    flag = dal.find_login(chat_id)
    if flag:
        bot.send_message(chat_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        give_menu()
    else:
        bot.send_message(chat_id, text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é,\n"
                                       "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        bot.register_next_step_handler(message, get_login)


def check_login(message):
    global chat_id
    flag = dal.find_login(chat_id)
    if flag:
        bot.send_message(chat_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        give_menu()
    else:
        bot.send_message(chat_id, text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                                       "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        bot.register_next_step_handler(message, get_login)


@bot.message_handler(commands=(['regist']))
def registry(message):
    global chat_id
    chat_id = message.chat.id
    bot.send_message(chat_id, text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é,\n"
                                   "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(message, get_login)


def get_login(message):
    if check_valid(message.text):
        global login
        login = message.text
        print(login)
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞(–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏):")
        bot.register_next_step_handler(message, get_pass)
    else:
        bot.send_message(message.chat.id, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
        check_login(message)


def get_pass(message):
    if check_valid(message.text):
        global pas
        pas = message.text
        print(pas)
        bot.send_message(chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∫–∞–º–ø—É—Å:", reply_markup=types.InlineKeyboardMarkup(row_width=3).add(
            types.InlineKeyboardButton(text='MSK', callback_data='msk'),
            types.InlineKeyboardButton(text='KZN', callback_data='kzn'),
            types.InlineKeyboardButton(text='NSK', callback_data='nsk')
        ))
    else:
        bot.send_message(message.chat.id, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
        check_login(message)


def type_parser(password):
    user_type = ""
    if password == "adm":
        user_type = "ADM"
    elif password == "stu":
        user_type = "STU"
    elif password == "abi":
        user_type = "ABI"
    return user_type


def get_camp():
    global login, pas, camp, chat_id, messa
    print(login, pas, camp)
    if pas in ["adm", "stu", "abi"] and camp in ['MSK', 'KZN', 'NSK']:
        user_type = type_parser(pas)
        if dal.add_user(chat_id=str(chat_id), login_=str(login), campus_=str(camp),
                        type_=user_type):
            give_menu()
        else:
            bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            registry()
    else:
        check_login(messa)


@bot.message_handler(commands=(['menu']))
def give_menu():
    global chat_id, camp
    camp = dal.get_campus(chat_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üÜï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    btn2 = types.KeyboardButton('‚ÑπÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
    if dal.get_type(chat_id) == 'ADM':
        btn3 = types.KeyboardButton('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –∫–∞–º–ø—É—Å–µ')
        btn4 = types.KeyboardButton('‚ÄºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
        btn5 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
        kb.add(btn1, btn2, btn3, btn4, btn5)
    else:
        kb.add(btn1, btn2)
    bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=kb)


def add_booking():
    global chat_id
    item_speak = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", callback_data="speak")
    item_sport = types.InlineKeyboardButton(text="–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="sport")
    item_bg = types.InlineKeyboardButton(text="–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="boardgm")
    item_kich = types.InlineKeyboardButton(text="–ö—É—Ö–Ω–∏", callback_data="kitch")
    markup = types.InlineKeyboardMarkup(row_width=1).add(item_sport, item_bg, item_speak, item_kich)
    bot.send_message(chat_id=chat_id, text='–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –æ–±—ä–µ–∫—Ç?',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda message: True)
def GetUserObjectName(call):
    global camp, chat_id, o_type, o_name

    if call.data == 'speak':
        name_list = dal.get_object_name_list("conf_room", camp)
        message_text = ''
        for arr in name_list:
            message_text += "- " + arr[0] + "\n"
        bot.send_message(chat_id, text='–ö–∞–∫—É—é –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É –≤—ã–±–µ—Ä–µ—Ç–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \
        –æ–¥–Ω–∏–º –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        bot.send_message(chat_id, text=message_text)
        bot.register_next_step_handler(call.message, get_chose)

    elif call.data == 'sport':
        name_list = dal.get_object_name_list("sport_equ", camp)
        message_text = ''
        for arr in name_list:
            message_text += "- " + arr[0] + "\n"
        bot.send_message(chat_id, text='–ö–∞–∫–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \
        –æ–¥–Ω–∏–º –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        bot.send_message(chat_id, text=message_text)
        bot.register_next_step_handler(call.message, get_chose)

    elif call.data == 'boardgm':
        name_list = dal.get_object_name_list("board_game", camp)
        bot.send_message(chat_id, text='–ö–∞–∫—É—é –Ω–∞—Å—Ç–æ–ª—å–Ω—É—é –∏–≥—Ä—É –≤—ã–±–µ—Ä–µ—Ç–µ?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \
        –æ–¥–Ω–∏–º –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        message_text = ''
        for arr in name_list:
            message_text += "- " + arr[0] + "\n"
        bot.send_message(chat_id, text=message_text)
        bot.register_next_step_handler(call.message, get_chose)

    elif call.data == 'kitch':
        name_list = dal.get_object_name_list("kitchen", camp)
        message_text = ''
        for arr in name_list:
            message_text += "- " + arr[0] + "\n"
        bot.send_message(chat_id, text='–ö—É—Ö–Ω—é –∫–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –≤—ã–±–µ—Ä–µ—Ç–µ?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \
        –æ–¥–Ω–∏–º –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        bot.send_message(chat_id, text=message_text)
        bot.register_next_step_handler(call.message, get_chose)

    elif call.data == 'access':
        bot.send_message(chat_id, text='–£–∫–∞–∂–∏—Ç–µ id –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
        bot.register_next_step_handler(call.message, get_access)

    elif call.data == 'delete':
        bot.send_message(chat_id, text='–£–∫–∞–∂–∏—Ç–µ id –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
        bot.register_next_step_handler(call.message, delete_any_booking)

    elif call.data == 'conf_room':
        o_type = str(call.data)
        bot.send_message(chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞:")
        bot.register_next_step_handler(call.message, add_new_object_end)

    elif call.data == 'kitchen':
        o_type = str(call.data)
        bot.send_message(chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞:")
        bot.register_next_step_handler(call.message, add_new_object_end)

    elif call.data == 'sport_equ':
        o_type = str(call.data)
        bot.send_message(chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞:")
        bot.register_next_step_handler(call.message, add_new_object_end)

    elif call.data == 'board_game':
        o_type = str(call.data)
        bot.send_message(chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞:")
        bot.register_next_step_handler(call.message, add_new_object_end)

    elif call.data == 'msk':
        camp = 'MSK'
        get_camp()

    elif call.data == 'kzn':
        camp = 'KZN'
        get_camp()

    elif call.data == 'nsk':
        camp = 'NSK'
        get_camp()


def get_access(message):
    global bidi
    bidi = message.text
    bot.send_message(chat_id, text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n'
                                   '0 - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ\n'
                                   '1 - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ\n'
                                   '2 - –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è')
    bot.register_next_step_handler(message, get_status)


def get_status(message):
    print("IN get_status")
    global bidi, chat_id
    if dal.update_status(str(bidi), str(message.text)):
        bot.send_message(chat_id,
                         text=f'–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Ññ{str(bidi)} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status_parser(int(message.text))}')
    else:
        bot.send_message(chat_id, text='–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω')


def delete_any_booking(message):
    global chat_id
    if dal.delete_booking(message.text, chat_id):
        bot.send_message(chat_id, text=f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ id{message.text}: –£–¥–∞–ª–µ–Ω–æ')
    else:
        bot.send_message(chat_id, text='–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')


def get_chose(message):
    global chose, camp, chat_id
    name_list = []
    for arr in dal.get_object_name_list("sport_equ", camp):
        name_list.append(arr[0])
    for arr in dal.get_object_name_list("conf_room", camp):
        name_list.append(arr[0])
    for arr in dal.get_object_name_list("kitchen", camp):
        name_list.append(arr[0])
    for arr in dal.get_object_name_list("board_game", camp):
        name_list.append(arr[0])
    chose = message.text
    if chose in name_list:
        bot.send_message(chat_id, text='–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú :')
        bot.register_next_step_handler(message, get_time_start)
    else:
        bot.send_message(chat_id, text='–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ')


def get_time_start(message):
    global start_time
    start_time = message.text
    bot.send_message(chat_id, text='–£–∫–∞–∂–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú :')
    bot.register_next_step_handler(message, get_time_end)


def get_time_end(message):
    global end_time, start_time, chose
    end_time = message.text
    if dal.add_booking(dal.get_login(message.chat.id), dal.get_object_id(chose), start_time, end_time,
                       dal.get_campus(message.chat.id)):
        bot.send_message(chat_id, text='–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ')
    else:
        bot.send_message(chat_id, text='–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')


def status_parser(num):
    if num == 0:
        return "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ."
    elif num == 1:
        return "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ."
    elif num == 2:
        return "–û–∂–∏–¥–∞–Ω–∏–µ."


def watch_my_bookings():
    global chat_id
    book_list = dal.get_my_bookings(chat_id)
    if book_list != 0:
        message_text = ''
        for row in range(dal.get_range_of_mybook_list(chat_id)):
            message_line = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ" + str(book_list[row][0]) + ": " + book_list[row][1] + \
                           " —Å " + book_list[row][2] + " –¥–æ " + book_list[row][3] + ". –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + \
                           status_parser(book_list[row][4]) + "\n\n"
            message_text += message_line
        bot.send_message(chat_id, text=message_text, reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='delete')))
    else:
        bot.send_message(chat_id, text='–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')


def watch_all_bookings(campus):
    global chat_id
    book_list = dal.get_all_bookings(campus)
    message_text = ''
    list_range = len(book_list)
    if list_range != 0:
        for row in range(list_range):
            message_line = "book_id " + str(book_list[row][0]) + ": " + book_list[row][1] + " –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª(–∞) " + \
                           book_list[row][2] + " " + book_list[row][3] + " —Å " + book_list[row][4] + " –ø–æ " + \
                           book_list[row][5] + ", —Å—Ç–∞—Ç—É—Å: " + status_parser(book_list[row][6]) + "\n\n"
            message_text += message_line
    else:
        message_text = "–í –≤–∞—à–µ–º –∫–∞–º–ø—É—Å–µ –Ω–µ—Ç –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
    bot.send_message(chat_id, text=message_text)


def watch_waiting_list(campus):
    global chat_id
    book_list = dal.get_waiting_list(campus)
    message_text = ''
    list_range = len(book_list)
    if list_range != 0:
        for row in range(list_range):
            message_line = "book_id " + str(book_list[row][0]) + ": " + book_list[row][1] + \
                           " –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è " + \
                           book_list[row][2] + " " + book_list[row][3] + " —Å " + book_list[row][4] + " –ø–æ " + \
                           book_list[row][5] + "\n\n"
            message_text += message_line
    else:
        message_text = "–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç"
    kb = types.InlineKeyboardMarkup()
    btn_a = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='access')
    btn_b = types.InlineKeyboardButton(text='–£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data='delete')
    kb.add(btn_a, btn_b)
    bot.send_message(chat_id, text=message_text, reply_markup=kb)


o_type = ''
o_name = ''
o_info = ''


def add_new_object_type():
    global chat_id
    btn1 = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞', callback_data='conf_room')
    btn2 = types.InlineKeyboardButton(text='–ö—É—Ö–Ω—è', callback_data='kitchen')
    btn3 = types.InlineKeyboardButton(text='–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data='sport_equ')
    btn4 = types.InlineKeyboardButton(text='–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞', callback_data='board_game')
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(btn1, btn2, btn3, btn4)
    bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", reply_markup=kb)


def add_new_object_end(message):
    global o_type, o_name, camp
    o_name = message.text
    if dal.add_object(str(dal.get_object_type_id(o_type)), o_name, camp):
        bot.send_message(chat_id, text="–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        bot.send_message(chat_id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@bot.message_handler(content_types=['text'])
def menu_engine(message):
    global chat_id, camp
    chat_id = message.chat.id
    camp = dal.get_campus(chat_id)
    if message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ':
        add_booking()
    elif message.text == '‚ÑπÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π':
        watch_my_bookings()
    elif message.text == '‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –∫–∞–º–ø—É—Å–µ':
        if dal.get_type(chat_id) == 'ADM':
            watch_all_bookings(dal.get_campus(chat_id))
        else:
            bot.send_message(chat_id, text="‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    elif message.text == '‚ÄºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è':
        if dal.get_type(chat_id) == 'ADM':
            watch_waiting_list(dal.get_campus(chat_id))
        else:
            bot.send_message(chat_id, text="‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è':
        if dal.get_type(chat_id) == 'ADM':
            add_new_object_type()
        else:
            bot.send_message(chat_id, text="‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")


def check_valid(string):
    chars = [chr(i) for i in range(97, 123)]
    flag = True
    for i in string:
        if i not in chars:
            flag = False
            break
    return flag
